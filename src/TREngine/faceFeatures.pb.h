// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faceFeatures.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_faceFeatures_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_faceFeatures_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_faceFeatures_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_faceFeatures_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faceFeatures_2eproto;
class CFaceFeatures;
class CFaceFeaturesDefaultTypeInternal;
extern CFaceFeaturesDefaultTypeInternal _CFaceFeatures_default_instance_;
class CPerson;
class CPersonDefaultTypeInternal;
extern CPersonDefaultTypeInternal _CPerson_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CFaceFeatures* Arena::CreateMaybeMessage<::CFaceFeatures>(Arena*);
template<> ::CPerson* Arena::CreateMaybeMessage<::CPerson>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CPerson :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPerson) */ {
 public:
  CPerson();
  virtual ~CPerson();

  CPerson(const CPerson& from);
  CPerson(CPerson&& from) noexcept
    : CPerson() {
    *this = ::std::move(from);
  }

  inline CPerson& operator=(const CPerson& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPerson& operator=(CPerson&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPerson& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPerson* internal_default_instance() {
    return reinterpret_cast<const CPerson*>(
               &_CPerson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CPerson& a, CPerson& b) {
    a.Swap(&b);
  }
  inline void Swap(CPerson* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPerson* New() const final {
    return CreateMaybeMessage<CPerson>(nullptr);
  }

  CPerson* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPerson>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPerson& from);
  void MergeFrom(const CPerson& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPerson* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPerson";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceFeatures_2eproto);
    return ::descriptor_table_faceFeatures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatrueFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated float featrue = 3;
  int featrue_size() const;
  private:
  int _internal_featrue_size() const;
  public:
  void clear_featrue();
  private:
  float _internal_featrue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_featrue() const;
  void _internal_add_featrue(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_featrue();
  public:
  float featrue(int index) const;
  void set_featrue(int index, float value);
  void add_featrue(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      featrue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_featrue();

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPerson)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > featrue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_faceFeatures_2eproto;
};
// -------------------------------------------------------------------

class CFaceFeatures :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CFaceFeatures) */ {
 public:
  CFaceFeatures();
  virtual ~CFaceFeatures();

  CFaceFeatures(const CFaceFeatures& from);
  CFaceFeatures(CFaceFeatures&& from) noexcept
    : CFaceFeatures() {
    *this = ::std::move(from);
  }

  inline CFaceFeatures& operator=(const CFaceFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline CFaceFeatures& operator=(CFaceFeatures&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CFaceFeatures& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFaceFeatures* internal_default_instance() {
    return reinterpret_cast<const CFaceFeatures*>(
               &_CFaceFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CFaceFeatures& a, CFaceFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(CFaceFeatures* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CFaceFeatures* New() const final {
    return CreateMaybeMessage<CFaceFeatures>(nullptr);
  }

  CFaceFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CFaceFeatures>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CFaceFeatures& from);
  void MergeFrom(const CFaceFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFaceFeatures* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CFaceFeatures";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_faceFeatures_2eproto);
    return ::descriptor_table_faceFeatures_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 2,
    kImagePathFieldNumber = 1,
  };
  // repeated .CPerson persons = 2;
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::CPerson* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPerson >*
      mutable_persons();
  private:
  const ::CPerson& _internal_persons(int index) const;
  ::CPerson* _internal_add_persons();
  public:
  const ::CPerson& persons(int index) const;
  ::CPerson* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPerson >&
      persons() const;

  // required string imagePath = 1;
  bool has_imagepath() const;
  private:
  bool _internal_has_imagepath() const;
  public:
  void clear_imagepath();
  const std::string& imagepath() const;
  void set_imagepath(const std::string& value);
  void set_imagepath(std::string&& value);
  void set_imagepath(const char* value);
  void set_imagepath(const char* value, size_t size);
  std::string* mutable_imagepath();
  std::string* release_imagepath();
  void set_allocated_imagepath(std::string* imagepath);
  private:
  const std::string& _internal_imagepath() const;
  void _internal_set_imagepath(const std::string& value);
  std::string* _internal_mutable_imagepath();
  public:

  // @@protoc_insertion_point(class_scope:CFaceFeatures)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPerson > persons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagepath_;
  friend struct ::TableStruct_faceFeatures_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPerson

// required int32 id = 1;
inline bool CPerson::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPerson::has_id() const {
  return _internal_has_id();
}
inline void CPerson::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPerson::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPerson::id() const {
  // @@protoc_insertion_point(field_get:CPerson.id)
  return _internal_id();
}
inline void CPerson::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CPerson::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CPerson.id)
}

// required string name = 2;
inline bool CPerson::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPerson::has_name() const {
  return _internal_has_name();
}
inline void CPerson::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPerson::name() const {
  // @@protoc_insertion_point(field_get:CPerson.name)
  return _internal_name();
}
inline void CPerson::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CPerson.name)
}
inline std::string* CPerson::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CPerson.name)
  return _internal_mutable_name();
}
inline const std::string& CPerson::_internal_name() const {
  return name_.GetNoArena();
}
inline void CPerson::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CPerson::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CPerson.name)
}
inline void CPerson::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CPerson.name)
}
inline void CPerson::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CPerson.name)
}
inline std::string* CPerson::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CPerson::release_name() {
  // @@protoc_insertion_point(field_release:CPerson.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CPerson::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CPerson.name)
}

// repeated float featrue = 3;
inline int CPerson::_internal_featrue_size() const {
  return featrue_.size();
}
inline int CPerson::featrue_size() const {
  return _internal_featrue_size();
}
inline void CPerson::clear_featrue() {
  featrue_.Clear();
}
inline float CPerson::_internal_featrue(int index) const {
  return featrue_.Get(index);
}
inline float CPerson::featrue(int index) const {
  // @@protoc_insertion_point(field_get:CPerson.featrue)
  return _internal_featrue(index);
}
inline void CPerson::set_featrue(int index, float value) {
  featrue_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPerson.featrue)
}
inline void CPerson::_internal_add_featrue(float value) {
  featrue_.Add(value);
}
inline void CPerson::add_featrue(float value) {
  _internal_add_featrue(value);
  // @@protoc_insertion_point(field_add:CPerson.featrue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CPerson::_internal_featrue() const {
  return featrue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CPerson::featrue() const {
  // @@protoc_insertion_point(field_list:CPerson.featrue)
  return _internal_featrue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CPerson::_internal_mutable_featrue() {
  return &featrue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CPerson::mutable_featrue() {
  // @@protoc_insertion_point(field_mutable_list:CPerson.featrue)
  return _internal_mutable_featrue();
}

// -------------------------------------------------------------------

// CFaceFeatures

// required string imagePath = 1;
inline bool CFaceFeatures::_internal_has_imagepath() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CFaceFeatures::has_imagepath() const {
  return _internal_has_imagepath();
}
inline void CFaceFeatures::clear_imagepath() {
  imagepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CFaceFeatures::imagepath() const {
  // @@protoc_insertion_point(field_get:CFaceFeatures.imagePath)
  return _internal_imagepath();
}
inline void CFaceFeatures::set_imagepath(const std::string& value) {
  _internal_set_imagepath(value);
  // @@protoc_insertion_point(field_set:CFaceFeatures.imagePath)
}
inline std::string* CFaceFeatures::mutable_imagepath() {
  // @@protoc_insertion_point(field_mutable:CFaceFeatures.imagePath)
  return _internal_mutable_imagepath();
}
inline const std::string& CFaceFeatures::_internal_imagepath() const {
  return imagepath_.GetNoArena();
}
inline void CFaceFeatures::_internal_set_imagepath(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  imagepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CFaceFeatures::set_imagepath(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  imagepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CFaceFeatures.imagePath)
}
inline void CFaceFeatures::set_imagepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  imagepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CFaceFeatures.imagePath)
}
inline void CFaceFeatures::set_imagepath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  imagepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CFaceFeatures.imagePath)
}
inline std::string* CFaceFeatures::_internal_mutable_imagepath() {
  _has_bits_[0] |= 0x00000001u;
  return imagepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CFaceFeatures::release_imagepath() {
  // @@protoc_insertion_point(field_release:CFaceFeatures.imagePath)
  if (!_internal_has_imagepath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return imagepath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CFaceFeatures::set_allocated_imagepath(std::string* imagepath) {
  if (imagepath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imagepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagepath);
  // @@protoc_insertion_point(field_set_allocated:CFaceFeatures.imagePath)
}

// repeated .CPerson persons = 2;
inline int CFaceFeatures::_internal_persons_size() const {
  return persons_.size();
}
inline int CFaceFeatures::persons_size() const {
  return _internal_persons_size();
}
inline void CFaceFeatures::clear_persons() {
  persons_.Clear();
}
inline ::CPerson* CFaceFeatures::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:CFaceFeatures.persons)
  return persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPerson >*
CFaceFeatures::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:CFaceFeatures.persons)
  return &persons_;
}
inline const ::CPerson& CFaceFeatures::_internal_persons(int index) const {
  return persons_.Get(index);
}
inline const ::CPerson& CFaceFeatures::persons(int index) const {
  // @@protoc_insertion_point(field_get:CFaceFeatures.persons)
  return _internal_persons(index);
}
inline ::CPerson* CFaceFeatures::_internal_add_persons() {
  return persons_.Add();
}
inline ::CPerson* CFaceFeatures::add_persons() {
  // @@protoc_insertion_point(field_add:CFaceFeatures.persons)
  return _internal_add_persons();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPerson >&
CFaceFeatures::persons() const {
  // @@protoc_insertion_point(field_list:CFaceFeatures.persons)
  return persons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_faceFeatures_2eproto
